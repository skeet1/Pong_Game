// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum State {
  PENDING
  ACCEPTED
  REJECTED
}

enum Status {
  OFFLINE
  ONLINE
  INGAME
}

enum Role{
  OWNER
  ADMIN
  MEMBER
}

enum Type {
  PUBLIC
  PRIVATE
  PROTECTED
}

model User {
  id                              String   @unique @default(uuid())
  email                           String   @unique
  username                        String   @unique
  password                        String?
  avatar                          String   @default("http://127.0.0.1:8080/api/avatar/pictures/default.jpeg")
  cover                           String   @default("http://127.0.0.1:8080/api/cover/pictures/default.png")
  status                          Status   @default(ONLINE)
  country                         String?
  win                             Int      @default(0)
  loss                            Int      @default(0)
  ladder_level                    Int      @default(0)
  xp                              Int      @default(50)
  totalGames                      Int      @default(0)
  discordHandler                  String?
  twitterHandler                  String?
  tfa                             Boolean?  @default(false)
  twoFactorAuthenticationSecret   String?

  channelMessages                 ChannelMessage[] @relation(name: "MsgSender")

  userBan                         UserBlock[]        @relation(name: "userblock")
  banedUser                       UserBlock[]        @relation(name: "blockeduser")

  messagesSended                  Message[] @relation(name: "messageSended")
  messagesRecieved                Message[] @relation(name: "messageRecieved")

  friendRequest                   FriendRequest[] @relation(name: "friendRequest")
  friendRequested                 FriendRequest[] @relation(name: "friendRequested")

  matchWon                        Match[] @relation(name: "MatchWon")
  matchLost                       Match[] @relation(name: "MatchLost")

  friend                          Friendship[] @relation(name: "friends")
  friendOf                        Friendship[] @relation(name: "friendOf")

  achievement                     Achievement?

  memberof                        ChannelMembers[] @relation(name:"userToChannel")
  
  ChannelBan                      ChannelBan[]    @relation(name:"userBaned")

  created_date                    DateTime        @default(now())
}

model UserBlock {
  id          String      @unique @default(uuid())

  userId      String      
  user        User        @relation(fields: [userId], references: [id], name: "userblock")

  bannedUserId String
  bannedUser   User       @relation(fields: [bannedUserId], references: [id], name: "blockeduser")

  created_date  DateTime  @default(now())
}

model Match {
  id           String      @unique @default(uuid())
  
  winner_id    String
  winner User @relation(fields: [winner_id], references: [id], name: "MatchWon")

  loser_id     String
  loser  User @relation(fields: [loser_id], references: [id], name: "MatchLost")
  
  winner_score Int
  loser_score  Int

  played_at    DateTime @default(now())
}

model Achievement{
  id                   String @unique @default(uuid())

  userId               String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountCreationAchie Boolean
  firstFriendAchie     Boolean  @default(false)
  firstGameAchie       Boolean  @default(false)
  threeGameInRowAchie  Boolean  @default(false)
  firstWinAchie        Boolean  @default(false)
  cleanSheetGameAchie  Boolean  @default(false)
  tenGameInRowAchie    Boolean  @default(false)

  created_at           DateTime @default(now())
}

model FriendRequest {
  id          String      @unique @default(uuid())

  requester_id   String
  requester   User @relation(fields: [requester_id], references: [id], name: "friendRequest", onDelete: Cascade)
  
  requested_id String
  requested User @relation(fields: [requested_id], references: [id], name: "friendRequested", onDelete: Cascade)
  
  state    State

  created_at  DateTime @default(now())

  updated_at  DateTime 
}

model Friendship {
  id             String    @unique   @default(uuid())

  user_id      String
  user         User   @relation(fields: [user_id], references: [id], name: "friends", onDelete: Cascade)

  friend_id    String
  friend       User   @relation(fields: [friend_id], references: [id], name: "friendOf", onDelete: Cascade)

  created_at  DateTime  @default(now())
}

model Message {
  id          String      @unique @default(uuid())

  sender_id   String
  sender      User     @relation(fields: [sender_id], references: [id], name: "messageSended", onDelete: Cascade)
  
  reciever_id String
  reciever    User     @relation(fields: [reciever_id], references: [id], name: "messageRecieved", onDelete: Cascade)

  content     String
  
  created_at  DateTime @default(now())
}

model Channel {
  id                String    @unique @default(uuid())
  name              String
  type              Type
  password          String?

  messages          ChannelMessage[] @relation("message")

  members           ChannelMembers[]  @relation(name: "channelMembers")
  
  banedUsers        ChannelBan[]      @relation(name: "channelBan")
  
  created_at        DateTime @default(now())
}

model ChannelMessage {
  id         String      @unique @default(uuid())

  channel_id String
  channel Channel @relation(fields: [channel_id], references: [id], name: "message", onDelete: Cascade)

  user_id    String
  user    User    @relation(fields: [user_id], references: [id], name: "MsgSender", onDelete: Cascade)
  
  content    String
  
  created_at DateTime @default(now())
}

model ChannelMembers{
  id        String @unique @default(uuid())

  userId    String
  user      User @relation(fields: [userId], references:[id], name: "userToChannel", onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references:[id], name: "channelMembers", onDelete: Cascade)
  
  role Role
}

model ChannelBan{
  id          String @unique @default(uuid())

  userId      String
  user        User @relation(fields: [userId], references:[id], name: "userBaned", onDelete: Cascade)

  channelId   String
  channel     Channel @relation(fields: [channelId], references:[id], name: "channelBan", onDelete: Cascade)

  created_at  DateTime @default(now()) 
}

