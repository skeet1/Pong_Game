// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String   @unique @default(uuid())
  email                           String   @unique
  username                        String   @unique
  password                        String?   
  avatar                          String   @default("../resources/avatar.png")
  cover                           String   @default("../resources/cover.png")
  status                          Status   @default(ONLINE)
  country                         String?
  win                             Int      @default(0)
  loss                            Int      @default(0)
  ladder_level                    Int      @default(0)
  xp                              Int      @default(50)
  totalGames                      Int      @default(0)
  discordHandler                  String?
  twitterHandler                  String?
  tfa                             Boolean?  @default(false)
  twoFactorAuthenticationSecret   String?   

  channelMessages                 Channel_message[] @relation(name: "MsgSender")

  messagesSended                  Message[] @relation(name: "messageSended")
  messagesRecieved                Message[] @relation(name: "messageRecieved")

  matchWon                        Match[] @relation(name: "MatchWon")
  matchLost                       Match[] @relation(name: "MatchLost")

  friendRequest                   Friend[] @relation(name: "friendRequest")
  friendRecieve                   Friend[] @relation(name: "friendRecieve")

  achievement                     Achievement?

  roles                           UserRole[] @relation(name:"userRole")
  
  channelState                    ChannelBlock[] @relation(name:"userChannelState")

  created_date                    DateTime @default(now())
}

model Match {
  id           String      @unique @default(uuid())
  
  winner_id    String
  winner User @relation(fields: [winner_id], references: [id], name: "MatchWon")

  loser_id     String
  loser  User @relation(fields: [loser_id], references: [id], name: "MatchLost")
  
  winner_score Int
  loser_score  Int

  played_at    DateTime @default(now())
}

model Achievement{
  id                   String @unique @default(uuid())

  userId               String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountCreationAchie Boolean
  firstFriendAchie     Boolean  @default(false)
  firstGameAchie       Boolean  @default(false)
  threeGameInRowAchie  Boolean  @default(false)
  firstWinAchie        Boolean  @default(false)
  cleanSheetGameAchie  Boolean  @default(false)
  tenGameInRowAchie    Boolean  @default(false)
}

model Friend {
  id          String      @unique @default(uuid())

  sender_id   String
  sender   User @relation(fields: [sender_id], references: [id], name: "friendRequest")
  
  reciever_id String
  reciever User @relation(fields: [reciever_id], references: [id], name: "friendRecieve")
  
  state    State  

  created_at  DateTime @default(now())
}

model Message {
  id          String      @unique @default(uuid())

  sender_id   String
  sender      User     @relation(fields: [sender_id], references: [id], name: "messageSended")
  
  reciever_id String
  reciever    User     @relation(fields: [reciever_id], references: [id], name: "messageRecieved")

  content     String
  
  created_at  DateTime @default(now())
}

model Channel {
  id       String    @unique @default(uuid())
  name     String
  type     Type
  password String?

  messages Channel_message[] @relation("message")

  roles    UserRole[] @relation(name: "channelUser")
  
  restrictedUsers ChannelBlock[] @relation(name: "restrictedUser")
  
  created_at DateTime @default(now())
}

model Channel_message {
  id         String      @unique @default(uuid())

  channel_id String
  channel Channel @relation(fields: [channel_id], references: [id], name: "message", onDelete: Cascade)

  user_id    String
  user    User    @relation(fields: [user_id], references: [id], name: "MsgSender", onDelete: Cascade)
  
  content    String
  
  created_at DateTime @default(now())
}

model UserRole{
  id        String @unique @default(uuid())

  userId    String
  user User @relation(fields: [userId], references:[id], name: "userRole", onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references:[id], name: "channelUser", onDelete: Cascade)
  
  role Role
}

model ChannelBlock{
  id        String @unique @default(uuid())

  userId    String
  user User @relation(fields: [userId], references:[id], name: "userChannelState", onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId], references:[id], name: "restrictedUser", onDelete: Cascade)
  
  isBanned  Boolean @default(false)
  isMute    Boolean @default(false)
}

enum State {
  FRIENDS
  REQUESTER_BLOCK_RECIEVER
  RECIEVER_BLOCK_REQUESTER
}

enum Status {
  OFFLINE
  ONLINE
  INGAME
}

enum Role{
  OWNER
  ADMIN
  MEMBER
}

enum Type {
  PUBLIC
  PRIVATE
  PROTECTED
}
